package com.codeup.adlister.dao;

import com.codeup.adlister.models.Ad;
import com.mysql.cj.jdbc.Driver;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class MySQLAdsDao implements Ads {

    private Connection connection = null;

    // Constructor
    public MySQLAdsDao(Config config) {
        try {
            // Register new connection to db with the driver
            DriverManager.registerDriver(new Driver());
            connection = DriverManager.getConnection(
                    config.getUrl(),
                    config.getUser(),
                    config.getPassword()
            );
        } catch (SQLException e) {
            throw new RuntimeException("Error connecting to the database!", e);
        }
    }

    @Override
    public List<Ad> all() {
        try {
            // New statement to get all ads sorted by date created
            PreparedStatement stmt = connection.prepareStatement("SELECT * FROM ads ORDER BY date_created DESC");

            // Execute query
            ResultSet rs = stmt.executeQuery();

            // return ads from method that gets all ads from the ResultSet
            return createAdsFromResults(rs);
        } catch (SQLException e) {
            throw new RuntimeException("Error retrieving all ads.", e);
        }
    }

    @Override
    public List<Ad> getAdsByUserId(long id) {
        try {
            // New statement to get ad by a specific user id
            PreparedStatement stmt = connection.prepareStatement("SELECT * FROM ads WHERE user_id = ? ORDER BY date_created DESC");
            // Insert user id into statement
            stmt.setLong(1, id);

            // Execute query
            ResultSet rs = stmt.executeQuery();

            // Return ads from method that gets ads from the ResultSet
            return createAdsFromResults(rs);
        } catch (SQLException e) {
            throw new RuntimeException("Error retrieving ads by user id.", e);
        }
    }

    @Override
    public Ad getAdById(long id) {
        try {
            // New statement to find an ad with a specific id
            PreparedStatement stmt = connection.prepareStatement("SELECT * FROM ads WHERE id = ?");
            // Insert ad id into statement
            stmt.setLong(1, id);

            // Execute query
            ResultSet rs = stmt.executeQuery();
            // Not sure why this is necessary
            rs.next();

            // Return extracted ad from ResultSet
            return extractAd(rs);
        } catch (SQLException e) {
            throw new RuntimeException("Error retrieving ads by id.", e);
        }
    }

    @Override
    public List<Ad> getAdsByCategory(String filter) {
        try {
            // Statement that joins the categories table to the ads table and returns ads with a specific category
            PreparedStatement stmt = connection.prepareStatement("SELECT ads.id, user_id, title, description, date_created FROM ads JOIN ad_cat ac on ads.id = ac.ad_id JOIN categories c on ac.cat_id = c.id WHERE c.name = ?");
            stmt.setString(1, filter);

            // Execute
            ResultSet rs = stmt.executeQuery();

            return createAdsFromResults(rs);
        } catch (SQLException e) {
            throw new RuntimeException("Error retrieving ads by category", e);
        }
    }

    public List<Ad> getAdsBySearchTerm(String search) {

        // Add % to search term so it can be used the sql query
        search = "%" + search + "%";
        try {
            // Statement to search the db using LIKE
            PreparedStatement stmt = connection.prepareStatement("SELECT * FROM ads WHERE title LIKE ? OR description LIKE ? ORDER BY date_created DESC");
            // Insert search term into statement
            stmt.setString(1, search);
            stmt.setString(2, search);

            // Execute query
            ResultSet rs = stmt.executeQuery();

            // Return ads
            return createAdsFromResults(rs);
        } catch (SQLException e) {
            throw new RuntimeException("Error retrieving ads by user id.", e);
        }
    }

    @Override
    public Long insert(Ad ad) {
        try {
            // New insert query
            String insertQuery = "INSERT INTO ads(user_id, title, description,date_created) VALUES (?, ?, ?, ?)";
            // Create statement
            PreparedStatement stmt = connection.prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS);
            // Insert ad details into statement
            stmt.setLong(1, ad.getUserId());
            stmt.setString(2, ad.getTitle());
            stmt.setString(3, ad.getDescription());
            stmt.setTimestamp(4, Timestamp.valueOf(ad.getDateCreated()));

            // Execute update query
            stmt.executeUpdate();
            // Get keys generated by query
            ResultSet rs = stmt.getGeneratedKeys();

            // Again not sure why this exists
            rs.next();

            // Need to get the ad id before we can link the categories to it
            ad.setId(rs.getLong(1));

            // Insert the categories
            DaoFactory.getCategoriesDao().insert(ad);

            // Return generated keys
            return rs.getLong(1);
        } catch (SQLException e) {
            throw new RuntimeException("Error creating a new ad.", e);
        }
    }

    public void edit(Ad ad) {
        try {
            // New update query
            String insertQuery = "UPDATE ads SET user_id = ?, title = ?, description = ?, date_created = ? WHERE id = ?";
            // Create statement
            PreparedStatement stmt = connection.prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS);
            // Insert ad details into statement
            stmt.setLong(1, ad.getUserId());
            stmt.setString(2, ad.getTitle());
            stmt.setString(3, ad.getDescription());
            stmt.setTimestamp(4, Timestamp.valueOf(ad.getDateCreated()));
            stmt.setLong(5, ad.getId());
            // Execute update query
            stmt.executeUpdate();
            // Get keys generated by query
            ResultSet rs = stmt.getGeneratedKeys();

            // Again not sure why this exists
            rs.next();

            // Delete the existing categories
            DaoFactory.getCategoriesDao().delete(ad);
            // And add the new ones
            DaoFactory.getCategoriesDao().insert(ad);

        } catch (SQLException e) {
            throw new RuntimeException("Error creating a new ad.", e);
        }
    }

    // Extract an ad from the column values in the current row
    private Ad extractAd(ResultSet rs) throws SQLException {
        return new Ad(
                rs.getLong("id"),
                rs.getLong("user_id"),
                rs.getString("title"),
                rs.getString("description"),
                rs.getTimestamp("date_created").toLocalDateTime(),
                DaoFactory.getCategoriesDao().getCategoriesByAdId(rs.getLong("id"))
        );
    }

    // Goes through rows in result set and creates ads for each one, returns them all as a list
    private List<Ad> createAdsFromResults(ResultSet rs) throws SQLException {
        List<Ad> ads = new ArrayList<>();

        // Loop through each row in the ResultSet
        while (rs.next()) {
            ads.add(extractAd(rs));
        }
        return ads;
    }
}
